import { NextRequest, NextResponse } from 'next/server'
import { faker } from '@faker-js/faker'

// Top 100 most common nmap ports (based on common services)
const TOP_100_NMAP_PORTS = [
  21, 22, 23, 25, 53, 80, 110, 111, 135, 139,
  143, 161, 389, 443, 445, 993, 995, 1025, 1080, 1194,
  1433, 1521, 1723, 2049, 2082, 2083, 2086, 2087, 2095, 2096,
  2121, 2222, 2480, 3000, 3128, 3306, 3389, 3690, 4000,
  4001, 4443, 4567, 5000, 5060, 5222, 5269, 5432, 5631,
  5800, 5900, 6000, 6001, 6667, 6697, 7000, 7001, 7070,
  8000, 8001, 8008, 8080, 8081, 8088, 8090, 8181, 8443,
  8888, 9000, 9001, 9043, 9090, 9100, 9200, 9443, 9999,
  10000, 11211, 11371, 12345, 13782, 15000, 15441, 16384, 16482,
  18080, 20000, 22222, 26443, 27017, 28017, 31337, 32768, 49152,
  49153, 49154, 49155, 49156, 49157, 50000, 50030, 50060, 50070, 50075
]

export async function GET(request: NextRequest) {
  try {
    // Check if dispatcher is configured
    const DISPATCHER_URL = process.env.DISPATCHER_URL

    if (DISPATCHER_URL) {
      // Redirect to configured dispatcher
      return NextResponse.redirect(DISPATCHER_URL + '/getwork')
    }

    // No dispatcher configured, generate random work locally
    const randomIP = faker.internet.ipv4()
    const selectedPorts = faker.helpers.arrayElements(TOP_100_NMAP_PORTS, { min: 10, max: 50 })

    const workSpec = {
      type: 'nmap',
      target: randomIP,
      ports: selectedPorts,
      profile: 'top-ports-random',
      generated_at: new Date().toISOString(),
      note: 'Generated by local fallback dispatcher'
    }

    return NextResponse.json(workSpec)

  } catch (error) {
    console.error('GetWork API error:', error)
    return NextResponse.json(
      { error: 'Failed to generate work specification' },
      { status: 500 }
    )
  }
}
